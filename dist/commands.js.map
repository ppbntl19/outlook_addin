{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/commands/commands.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/helper/validate_classification.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setClassfication","type","Office","context","mailbox","item","body","setSelectedDataAsync","coercionType","CoercionType","Html","result","event","completed","err","error","notificationMessages","replaceAsync","message","initialize","reason","self","window","global","undefined","setInternal","g","this","Function","e"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,K,mCClFrD,0BA4CA,SAASC,EAAiBC,GAExB,IACEC,OAAOC,QAAQC,QAAQC,KAAKC,KAAKC,qBAAqBN,EAAM,CAAEO,aAAcN,OAAOO,aAAaC,OAAQ,SACtGC,GAEAC,MAAMC,eAER,MAAOC,GA3CQC,EA4CLD,EA3CZZ,OAAOC,QAAQC,QAAQC,KAAKW,qBAAqBC,aAC/C,eACA,CACEhB,KAAM,eACNiB,QAASH,IAEX,SAASJ,OAsCTC,MAAMC,YA7CV,IAAmBE,EAHnBb,OAAOiB,WAAa,SAASC,MAoDJ,oBAATC,KACVA,KACkB,oBAAXC,OACPA,YACkB,IAAXC,EACPA,OACAC,GAMJC,YAvCF,SAAqBb,GACnBZ,EAAiB,c,qCChCnB,IAAI0B,EAGJA,EAAI,WACH,OAAOC,KADJ,GAIJ,IAECD,EAAIA,GAAK,IAAIE,SAAS,cAAb,GACR,MAAOC,GAEc,iBAAXP,SAAqBI,EAAIJ,QAOrCvD,EAAOD,QAAU4D,G,iCCZjBxB,OAAOiB,WAAa,SAASC,GACblB,OAAOC,QAAQC,QAAQC","file":"commands.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 307);\n","import { validateSubjectAndCC } from \"../helper/validate_classification.js\";\n\nvar config;\nvar btnEvent;\n\n// The initialize function must be run each time a new page is loaded.\nOffice.initialize = function(reason) {};\n\n// Add any ui-less function here.\nfunction showError(error) {\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\n    \"github-error\",\n    {\n      type: \"errorMessage\",\n      message: error\n    },\n    function(result) {}\n  );\n}\n\n//On mail send\nfunction validateClassfication() {\n  //Get Default\n  config = getConfig();\n  //Check if  Default available\n  if (config.default_classfication) {\n  } else {\n  }\n}\n\n//Set all four type of commands function\nfunction setInternal(event) {\n  setClassfication(\"Internal\");\n}\nfunction setScrete(event) {\n  setClassfication(\"Screte\");\n}\nfunction setConfidential(event) {\n  setClassfication(\"Confidential\");\n}\nfunction setPublic(event) {\n  setClassfication(\"Public\");\n}\n\nfunction setClassfication(type) {\n  // Get the default gist content and insert.\n  try {\n    Office.context.mailbox.item.body.setSelectedDataAsync(type, { coercionType: Office.CoercionType.Html }, function(\n      result\n    ) {\n      event.completed();\n    });\n  } catch (err) {\n    showError(err);\n    event.completed();\n  }\n}\nfunction getGlobal() {\n  return typeof self !== \"undefined\"\n    ? self\n    : typeof window !== \"undefined\"\n    ? window\n    : typeof global !== \"undefined\"\n    ? global\n    : undefined;\n}\n\nvar g = getGlobal();\n\n// The add-in command functions need to be available in global scope.\ng.setInternal = setInternal;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\nvar mailboxItem;\r\n\r\nOffice.initialize = function(reason) {\r\n  mailboxItem = Office.context.mailbox.item;\r\n};\r\n\r\n// Entry point for Contoso Message Body Checker add-in before send is allowed.\r\n// <param name=\"event\">MessageSend event is automatically passed by BlockOnSend code to the function specified in the manifest.</param>\r\nexport function validateBody(event) {\r\n  mailboxItem.body.getAsync(\"html\", { asyncContext: event }, checkBodyOnlyOnSendCallBack);\r\n}\r\n\r\n// Invoke by Contoso Subject and CC Checker add-in before send is allowed.\r\n// <param name=\"event\">MessageSend event is automatically passed by BlockOnSend code to the function specified in the manifest.</param>\r\nexport function validateSubjectAndCC(event) {\r\n  shouldChangeSubjectOnSend(event);\r\n}\r\n\r\n// Check if the subject should be changed. If it is already changed allow send. Otherwise change it.\r\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\r\nexport function shouldChangeSubjectOnSend(event) {\r\n  mailboxItem.subject.getAsync({ asyncContext: event }, function(asyncResult) {\r\n    addCCOnSend(asyncResult.asyncContext);\r\n    //console.log(asyncResult.value);\r\n    // Match string.\r\n    var checkSubject = new RegExp(/\\[Checked\\]/).test(asyncResult.value);\r\n    // Add [Checked]: to subject line.\r\n    subject = \"[Checked]: \" + asyncResult.value;\r\n\r\n    // Check if a string is blank, null or undefined.\r\n    // If yes, block send and display information bar to notify sender to add a subject.\r\n    if (asyncResult.value === null || /^\\s*$/.test(asyncResult.value)) {\r\n      mailboxItem.notificationMessages.addAsync(\"NoSend\", {\r\n        type: \"errorMessage\",\r\n        message: \"Please enter a subject for this email.\"\r\n      });\r\n      asyncResult.asyncContext.completed({ allowEvent: false });\r\n    } else {\r\n      // If can't find a [Checked]: string match in subject, call subjectOnSendChange function.\r\n      if (!checkSubject) {\r\n        subjectOnSendChange(subject, asyncResult.asyncContext);\r\n        //console.log(checkSubject);\r\n      } else {\r\n        // Allow send.\r\n        asyncResult.asyncContext.completed({ allowEvent: true });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Add a CC to the email.  In this example, CC contoso@contoso.onmicrosoft.com\r\n// <param name=\"event\">MessageSend event passed from calling function</param>export\r\nexport function addCCOnSend(event) {\r\n  mailboxItem.cc.setAsync([\"Contoso@contoso.onmicrosoft.com\"], { asyncContext: event });\r\n}\r\n\r\n// Check if the subject should be changed. If it is already changed allow send, otherwise change it.\r\n// <param name=\"subject\">Subject to set.</param>\r\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\r\nexport function subjectOnSendChange(subject, event) {\r\n  mailboxItem.subject.setAsync(subject, { asyncContext: event }, function(asyncResult) {\r\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\r\n      mailboxItem.notificationMessages.addAsync(\"NoSend\", {\r\n        type: \"errorMessage\",\r\n        message: \"Unable to set the subject.\"\r\n      });\r\n\r\n      // Block send.\r\n      asyncResult.asyncContext.completed({ allowEvent: false });\r\n    } else {\r\n      // Allow send.\r\n      asyncResult.asyncContext.completed({ allowEvent: true });\r\n    }\r\n  });\r\n}\r\n\r\n// Check if the body contains a specific set of blocked words. If it contains the blocked words, block email from being sent. Otherwise allows sending.\r\n// <param name=\"asyncResult\">MessageSend event passed from the calling function.</param>\r\nexport function checkBodyOnlyOnSendCallBack(asyncResult) {\r\n  var listOfBlockedWords = new Array(\"blockedword\", \"blockedword1\", \"blockedword2\");\r\n  var wordExpression = listOfBlockedWords.join(\"|\");\r\n\r\n  // \\b to perform a \"whole words only\" search using a regular expression in the form of \\bword\\b.\r\n  // i to perform case-insensitive search.\r\n  var regexCheck = new RegExp(\"\\\\b(\" + wordExpression + \")\\\\b\", \"i\");\r\n  var checkBody = regexCheck.test(asyncResult.value);\r\n\r\n  if (checkBody) {\r\n    mailboxItem.notificationMessages.addAsync(\"NoSend\", {\r\n      type: \"errorMessage\",\r\n      message: \"Blocked words have been found in the body of this email. Please remove them.\"\r\n    });\r\n    // Block send.\r\n    asyncResult.asyncContext.completed({ allowEvent: false });\r\n  }\r\n\r\n  // Allow send.\r\n  asyncResult.asyncContext.completed({ allowEvent: true });\r\n}\r\n"],"sourceRoot":""}